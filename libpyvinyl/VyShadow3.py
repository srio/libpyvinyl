from VyBase import VyBaseData, VyBaseParameters, VyBaseCalculator
import Shadow

class VyS3Parameters(VyBaseParameters):

    def __init__(self, source=None, optical_elements=None):
        super().__init__()
        if source is None:
            source = Shadow.Source()
        self["source"] = source

        if optical_elements is None:
            optical_elements = []
        self["optical_elements"] = optical_elements

    def is_valid(self):
        if isinstance(self["source"], Shadow.Source) and isinstance(self["optical_elements"], list):
            for optical_element in self["optical_elements"]:
                if not isinstance(optical_element, Shadow.OE): return False
            return True
        else:
            return False

    # TODO: implement other derived methods
    def to_json(self, **kwargs):
        raise NotImplementedError()

    def from_json(self, **kwargs):
        raise NotImplementedError()

    def to_h5(self, **kwargs):
        raise NotImplementedError()

    def from_h5(self, **kwargs):

        raise NotImplementedError()



class VyS3Data(VyBaseData):

    def __init__(self, N=None):
        VyBaseData.__init__(self)
        if N is None:
            self._beam = Shadow.Beam()
        else:
            self._beam = Shadow.Beam(N=N)

    # TODO: implement other derived methods
    def is_valid(self):
        return isinstance(self._beam, Shadow.Beam)

    def to_h5(self, **kwargs):
        raise NotImplementedError()

    def from_h5(self, **kwargs):
        raise NotImplementedError()




class VyS3Calculator(VyBaseCalculator):

    def __init__(self,
        parameters = None,
        data = None):

        if parameters is None:
            parameters = VyS3Parameters()
        if data is None:
            data = VyS3Data()
        super().__init__(parameters, data)


    def backengine(self):
        beam = self.get_data()._beam

        source = self.get_parameters()["source"]
        optical_elements = self.get_parameters()["optical_elements"]

        beam.genSource(source)
        for i,optical_element in enumerate(optical_elements):
            beam.traceOE(optical_element, i+1)

        return True # success!

    def dump(self):
        raise NotImplementedError()

    def to_h5(self, filename="tmp.h5"):
        from orangecontrib.panosc.shadow.util.openPMD import saveShadowToHDF
        saveShadowToHDF(self.get_data()._beam, filename=filename)



if __name__ == "__main__":
    # example from Oasys workspace https://raw.githubusercontent.com/oasys-kit/oasys_school/master/second/session_shadowoui/shadowoui_example.ows

    method = 'vinyl' # use 'native' or 'vinyl'

    if method == 'native': # script generated by Oasys
        #
        # Python script to run shadow3. Created automatically with ShadowTools.make_python_script_from_list().
        #
        import Shadow
        import numpy

        # write (1) or not (0) SHADOW files start.xx end.xx star.xx
        iwrite = 0

        #
        # initialize shadow3 source (oe0) and beam
        #
        beam = Shadow.Beam()
        oe0 = Shadow.Source()
        oe1 = Shadow.OE()

        #
        # Define variables. See meaning of variables in:
        #  https://raw.githubusercontent.com/srio/shadow3/master/docs/source.nml
        #  https://raw.githubusercontent.com/srio/shadow3/master/docs/oe.nml
        #

        oe0.FDISTR = 3
        oe0.F_COLOR = 3
        oe0.F_PHOT = 0
        oe0.HDIV1 = 0.0
        oe0.HDIV2 = 0.0
        oe0.NPOINT = 10000
        oe0.PH1 = 8799.999
        oe0.PH2 = 8799.999
        oe0.SIGDIX = 4.728541797631135e-06
        oe0.SIGDIZ = 4.095010077148124e-06
        oe0.SIGMAX = 0.0015810951361940363
        oe0.SIGMAZ = 0.0006681031579752021
        oe0.VDIV1 = 0.0
        oe0.VDIV2 = 0.0

        oe1.DUMMY = 1.0
        oe1.FMIRR = 3
        oe1.FWRITE = 1
        oe1.T_IMAGE = 1000.0
        oe1.T_INCIDENCE = 89.828
        oe1.T_REFLECTION = 89.828
        oe1.T_SOURCE = 4000.0

        # Run SHADOW to create the source

        if iwrite:
            oe0.write("start.00")

        beam.genSource(oe0)

        if iwrite:
            oe0.write("end.00")
            beam.write("begin.dat")

        #
        # run optical element 1
        #
        print("    Running optical element: %d" % (1))
        if iwrite:
            oe1.write("start.01")

        beam.traceOE(oe1, 1)

        if iwrite:
            oe1.write("end.01")
            beam.write("star.01")

        Shadow.ShadowTools.plotxy(beam, 1, 3, nbins=101, nolost=1, title="Real space")


    elif method == 'vinyl':

        #
        # initialize parameters (beamline = source + optical elements)
        #
        number_of_optical_elements = 1
        vy_beamline = VyS3Parameters(source=Shadow.Source(), optical_elements=[Shadow.OE()]*number_of_optical_elements)

        #     #
        #     # Define variables. See meaning of variables in:
        #     #  https://raw.githubusercontent.com/srio/shadow3/master/docs/source.nml
        #     #  https://raw.githubusercontent.com/srio/shadow3/master/docs/oe.nml
        #     #
        #
        vy_beamline["source"].FDISTR = 3
        vy_beamline["source"].F_COLOR = 3
        vy_beamline["source"].F_PHOT = 0
        vy_beamline["source"].HDIV1 = 0.0
        vy_beamline["source"].HDIV2 = 0.0
        vy_beamline["source"].NPOINT = 10000
        vy_beamline["source"].PH1 = 8799.999
        vy_beamline["source"].PH2 = 8799.999
        vy_beamline["source"].SIGDIX = 4.728541797631135e-06
        vy_beamline["source"].SIGDIZ = 4.095010077148124e-06
        vy_beamline["source"].SIGMAX = 0.0015810951361940363
        vy_beamline["source"].SIGMAZ = 0.0006681031579752021
        vy_beamline["source"].VDIV1 = 0.0
        vy_beamline["source"].VDIV2 = 0.0

        vy_beamline["optical_elements"][0].DUMMY = 1.0
        vy_beamline["optical_elements"][0].FMIRR = 3
        vy_beamline["optical_elements"][0].FWRITE = 1
        vy_beamline["optical_elements"][0].T_IMAGE = 1000.0
        vy_beamline["optical_elements"][0].T_INCIDENCE = 89.828
        vy_beamline["optical_elements"][0].T_REFLECTION = 89.828
        vy_beamline["optical_elements"][0].T_SOURCE = 4000.0
        #
        # # Run SHADOW
        #
        print(vy_beamline.is_valid())
        vy_calculator = VyS3Calculator(vy_beamline, VyS3Data())
        print(vy_calculator.is_valid())
        vy_calculator.backengine()

        Shadow.ShadowTools.plotxy(vy_calculator.get_data()._beam, 1, 3, nbins=101, nolost=1, title="Real space")






